// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SOPHEADER_APSI_NETWORK_FBS_H_
#define FLATBUFFERS_GENERATED_SOPHEADER_APSI_NETWORK_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace apsi {
namespace network {
namespace fbs {

struct SenderOperationHeader;
struct SenderOperationHeaderBuilder;

enum SenderOperationType : uint32_t {
  SenderOperationType_sop_unknown = 0,
  SenderOperationType_sop_parms = 1,
  SenderOperationType_sop_oprf = 2,
  SenderOperationType_sop_query = 3,
  SenderOperationType_sop_response = 4,
  SenderOperationType_MIN = SenderOperationType_sop_unknown,
  SenderOperationType_MAX = SenderOperationType_sop_response
};

inline const SenderOperationType (&EnumValuesSenderOperationType())[5] {
  static const SenderOperationType values[] = {
    SenderOperationType_sop_unknown,
    SenderOperationType_sop_parms,
    SenderOperationType_sop_oprf,
    SenderOperationType_sop_query,
    SenderOperationType_sop_response
  };
  return values;
}

inline const char * const *EnumNamesSenderOperationType() {
  static const char * const names[6] = {
    "sop_unknown",
    "sop_parms",
    "sop_oprf",
    "sop_query",
    "sop_response",
    nullptr
  };
  return names;
}

inline const char *EnumNameSenderOperationType(SenderOperationType e) {
  if (flatbuffers::IsOutRange(e, SenderOperationType_sop_unknown, SenderOperationType_sop_response)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSenderOperationType()[index];
}

struct SenderOperationHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SenderOperationHeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_TYPE = 6
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  apsi::network::fbs::SenderOperationType type() const {
    return static_cast<apsi::network::fbs::SenderOperationType>(GetField<uint32_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION) &&
           VerifyField<uint32_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct SenderOperationHeaderBuilder {
  typedef SenderOperationHeader Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(SenderOperationHeader::VT_VERSION, version, 0);
  }
  void add_type(apsi::network::fbs::SenderOperationType type) {
    fbb_.AddElement<uint32_t>(SenderOperationHeader::VT_TYPE, static_cast<uint32_t>(type), 0);
  }
  explicit SenderOperationHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SenderOperationHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SenderOperationHeader>(end);
    return o;
  }
};

inline flatbuffers::Offset<SenderOperationHeader> CreateSenderOperationHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    apsi::network::fbs::SenderOperationType type = apsi::network::fbs::SenderOperationType_sop_unknown) {
  SenderOperationHeaderBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_version(version);
  return builder_.Finish();
}

inline const apsi::network::fbs::SenderOperationHeader *GetSenderOperationHeader(const void *buf) {
  return flatbuffers::GetRoot<apsi::network::fbs::SenderOperationHeader>(buf);
}

inline const apsi::network::fbs::SenderOperationHeader *GetSizePrefixedSenderOperationHeader(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<apsi::network::fbs::SenderOperationHeader>(buf);
}

inline bool VerifySenderOperationHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<apsi::network::fbs::SenderOperationHeader>(nullptr);
}

inline bool VerifySizePrefixedSenderOperationHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<apsi::network::fbs::SenderOperationHeader>(nullptr);
}

inline void FinishSenderOperationHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<apsi::network::fbs::SenderOperationHeader> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSenderOperationHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<apsi::network::fbs::SenderOperationHeader> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace network
}  // namespace apsi

#endif  // FLATBUFFERS_GENERATED_SOPHEADER_APSI_NETWORK_FBS_H_
