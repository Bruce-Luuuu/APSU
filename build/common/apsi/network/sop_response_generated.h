// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SOPRESPONSE_APSI_NETWORK_FBS_H_
#define FLATBUFFERS_GENERATED_SOPRESPONSE_APSI_NETWORK_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace apsi {
namespace network {
namespace fbs {

struct ParmsResponse;
struct ParmsResponseBuilder;

struct OPRFResponse;
struct OPRFResponseBuilder;

struct QueryResponse;
struct QueryResponseBuilder;

struct SenderOperationResponse;
struct SenderOperationResponseBuilder;

enum Response : uint8_t {
  Response_NONE = 0,
  Response_ParmsResponse = 1,
  Response_OPRFResponse = 2,
  Response_QueryResponse = 3,
  Response_MIN = Response_NONE,
  Response_MAX = Response_QueryResponse
};

inline const Response (&EnumValuesResponse())[4] {
  static const Response values[] = {
    Response_NONE,
    Response_ParmsResponse,
    Response_OPRFResponse,
    Response_QueryResponse
  };
  return values;
}

inline const char * const *EnumNamesResponse() {
  static const char * const names[5] = {
    "NONE",
    "ParmsResponse",
    "OPRFResponse",
    "QueryResponse",
    nullptr
  };
  return names;
}

inline const char *EnumNameResponse(Response e) {
  if (flatbuffers::IsOutRange(e, Response_NONE, Response_QueryResponse)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResponse()[index];
}

template<typename T> struct ResponseTraits {
  static const Response enum_value = Response_NONE;
};

template<> struct ResponseTraits<apsi::network::fbs::ParmsResponse> {
  static const Response enum_value = Response_ParmsResponse;
};

template<> struct ResponseTraits<apsi::network::fbs::OPRFResponse> {
  static const Response enum_value = Response_OPRFResponse;
};

template<> struct ResponseTraits<apsi::network::fbs::QueryResponse> {
  static const Response enum_value = Response_QueryResponse;
};

bool VerifyResponse(flatbuffers::Verifier &verifier, const void *obj, Response type);
bool VerifyResponseVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct ParmsResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ParmsResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ParmsResponseBuilder {
  typedef ParmsResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(ParmsResponse::VT_DATA, data);
  }
  explicit ParmsResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ParmsResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ParmsResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<ParmsResponse> CreateParmsResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  ParmsResponseBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<ParmsResponse> CreateParmsResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return apsi::network::fbs::CreateParmsResponse(
      _fbb,
      data__);
}

struct OPRFResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OPRFResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct OPRFResponseBuilder {
  typedef OPRFResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(OPRFResponse::VT_DATA, data);
  }
  explicit OPRFResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OPRFResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OPRFResponse>(end);
    fbb_.Required(o, OPRFResponse::VT_DATA);
    return o;
  }
};

inline flatbuffers::Offset<OPRFResponse> CreateOPRFResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  OPRFResponseBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<OPRFResponse> CreateOPRFResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return apsi::network::fbs::CreateOPRFResponse(
      _fbb,
      data__);
}

struct QueryResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef QueryResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKAGE_COUNT = 4
  };
  uint32_t package_count() const {
    return GetField<uint32_t>(VT_PACKAGE_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PACKAGE_COUNT) &&
           verifier.EndTable();
  }
};

struct QueryResponseBuilder {
  typedef QueryResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_package_count(uint32_t package_count) {
    fbb_.AddElement<uint32_t>(QueryResponse::VT_PACKAGE_COUNT, package_count, 0);
  }
  explicit QueryResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<QueryResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<QueryResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<QueryResponse> CreateQueryResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t package_count = 0) {
  QueryResponseBuilder builder_(_fbb);
  builder_.add_package_count(package_count);
  return builder_.Finish();
}

struct SenderOperationResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SenderOperationResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESPONSE_TYPE = 4,
    VT_RESPONSE = 6
  };
  apsi::network::fbs::Response response_type() const {
    return static_cast<apsi::network::fbs::Response>(GetField<uint8_t>(VT_RESPONSE_TYPE, 0));
  }
  const void *response() const {
    return GetPointer<const void *>(VT_RESPONSE);
  }
  template<typename T> const T *response_as() const;
  const apsi::network::fbs::ParmsResponse *response_as_ParmsResponse() const {
    return response_type() == apsi::network::fbs::Response_ParmsResponse ? static_cast<const apsi::network::fbs::ParmsResponse *>(response()) : nullptr;
  }
  const apsi::network::fbs::OPRFResponse *response_as_OPRFResponse() const {
    return response_type() == apsi::network::fbs::Response_OPRFResponse ? static_cast<const apsi::network::fbs::OPRFResponse *>(response()) : nullptr;
  }
  const apsi::network::fbs::QueryResponse *response_as_QueryResponse() const {
    return response_type() == apsi::network::fbs::Response_QueryResponse ? static_cast<const apsi::network::fbs::QueryResponse *>(response()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_RESPONSE_TYPE) &&
           VerifyOffsetRequired(verifier, VT_RESPONSE) &&
           VerifyResponse(verifier, response(), response_type()) &&
           verifier.EndTable();
  }
};

template<> inline const apsi::network::fbs::ParmsResponse *SenderOperationResponse::response_as<apsi::network::fbs::ParmsResponse>() const {
  return response_as_ParmsResponse();
}

template<> inline const apsi::network::fbs::OPRFResponse *SenderOperationResponse::response_as<apsi::network::fbs::OPRFResponse>() const {
  return response_as_OPRFResponse();
}

template<> inline const apsi::network::fbs::QueryResponse *SenderOperationResponse::response_as<apsi::network::fbs::QueryResponse>() const {
  return response_as_QueryResponse();
}

struct SenderOperationResponseBuilder {
  typedef SenderOperationResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_response_type(apsi::network::fbs::Response response_type) {
    fbb_.AddElement<uint8_t>(SenderOperationResponse::VT_RESPONSE_TYPE, static_cast<uint8_t>(response_type), 0);
  }
  void add_response(flatbuffers::Offset<void> response) {
    fbb_.AddOffset(SenderOperationResponse::VT_RESPONSE, response);
  }
  explicit SenderOperationResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SenderOperationResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SenderOperationResponse>(end);
    fbb_.Required(o, SenderOperationResponse::VT_RESPONSE);
    return o;
  }
};

inline flatbuffers::Offset<SenderOperationResponse> CreateSenderOperationResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    apsi::network::fbs::Response response_type = apsi::network::fbs::Response_NONE,
    flatbuffers::Offset<void> response = 0) {
  SenderOperationResponseBuilder builder_(_fbb);
  builder_.add_response(response);
  builder_.add_response_type(response_type);
  return builder_.Finish();
}

inline bool VerifyResponse(flatbuffers::Verifier &verifier, const void *obj, Response type) {
  switch (type) {
    case Response_NONE: {
      return true;
    }
    case Response_ParmsResponse: {
      auto ptr = reinterpret_cast<const apsi::network::fbs::ParmsResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Response_OPRFResponse: {
      auto ptr = reinterpret_cast<const apsi::network::fbs::OPRFResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Response_QueryResponse: {
      auto ptr = reinterpret_cast<const apsi::network::fbs::QueryResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyResponseVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyResponse(
        verifier,  values->Get(i), types->GetEnum<Response>(i))) {
      return false;
    }
  }
  return true;
}

inline const apsi::network::fbs::SenderOperationResponse *GetSenderOperationResponse(const void *buf) {
  return flatbuffers::GetRoot<apsi::network::fbs::SenderOperationResponse>(buf);
}

inline const apsi::network::fbs::SenderOperationResponse *GetSizePrefixedSenderOperationResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<apsi::network::fbs::SenderOperationResponse>(buf);
}

inline bool VerifySenderOperationResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<apsi::network::fbs::SenderOperationResponse>(nullptr);
}

inline bool VerifySizePrefixedSenderOperationResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<apsi::network::fbs::SenderOperationResponse>(nullptr);
}

inline void FinishSenderOperationResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<apsi::network::fbs::SenderOperationResponse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSenderOperationResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<apsi::network::fbs::SenderOperationResponse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace network
}  // namespace apsi

#endif  // FLATBUFFERS_GENERATED_SOPRESPONSE_APSI_NETWORK_FBS_H_
